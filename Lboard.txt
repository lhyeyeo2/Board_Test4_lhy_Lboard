CREATE TABLE BOARD(
NUM		NUMBER(8)		NOT NULL,	
NAME		VARCHAR2(20)		NOT NULL,
PASSWORD	VARCHAR2(20)		NOT NULL,
SUBJECT	VARCHAR2(50)		NOT NULL,
CONTENT	VARCHAR2(500)		NOT NULL,
WRITE_DATE	DATE		NOT NULL,
WRITE_TIME	TIMESTAMP	NOT NULL,
REF		NUMBER(8)	NOT NULL,
STEP		NUMBER(4)	NOT NULL,
LEV		NUMBER(4)	NOT NULL,
READ_CNT	NUMBER(8)	NOT NULL,
CHILD_CNT	NUMBER(4)	NUOT NULL,
PRIMARY KEY(NUM)
);




-- 접속한 계정의 테이블 목록보기

SELECT * FROM tabs;

---


() 외우기(1) 
()WebContent.META-INF.context.xml
<?xml version="1.0" encoding="UTF-8"?>

<Context>

<WatchedResource>WEB-INF/web.xml</WatchedResource>
<WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>

 <Resource 
    auth="Container" 
    driverClassName="oracle.jdbc.driver.OracleDriver" 
    name="jdbc/oracle" 
    password="tiger" 
    type="javax.sql.DataSource" 
    url="jdbc:oracle:thin:@localhost:1521:xe" 
    username="scott"/>  
</Context>





----
()board.model.BoardDTO.java







()board.command.BoardCmd.java
import javax.servlet.http.*;

public interface BoardCmd {
	
	public void execute(HttpServletRequest request, HttpServletResponse response);
	
//는 선언.(import javax.servlet.http.*; 필수, interface 필수,)

<!--
NoticeListCmd implements BoardCmd

NewsListCmd implements BoardCmd

FAQListCmd implements BoardCmd

개발자는 NoticeListCmd, NewsListCmd, FAQListCmd 3개의 execute 메소드를 구현해야 하고
사용자는 BoardCmd 의 execute 1개의 메소드만 호출하면 됩니다.
-->

BoardCmd.java 는 커맨드 패턴을 통해 BoardDAO 클래스를 이용하여 비지니스 로직 처리를 지시할 커맨드 클래스를
구현해야하는 인터페이스, ...BoardFrontController 서브릿부터 전달 받아 필요한 기능 수행.
이후 제작할 커맨드 클래스들은 







()board.BoardFrontController.java (서블릿 파일였나봄.아니고 .bbs로 들어오게끔.)
	import java.io.IOException;
	import javax.servlet.ServletException;
	import javax.servlet.annotation.WebServlet;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;

	import javax.servlet.RequestDispatcher;
	import board.command.*;
앞 머리만 따면 안됨.. 전체로 외워야. 2번째 ,는 Exception2개, annotation.WebServlet; 새롭고,

@WebServlet("*.bbs")
//	import javax.servlet.annotation.WebServlet;
	public class BoardFrontController extends HttpServlet {
		private static final long serialVersionUID = 1L;
		/**
		 * @see HttpServlet#httpServlet()
		 * 
		 */
		public BoardFrontController() {
			super();

//@see
다른 클래스나 메소드를 참고할 경우 사용.

//
<%String pathWebcontent=request.getContextPath();%>
<link rel="stylesheet" type="text/css" href="<%=pathWebcontent%>/css/bootstrap.css">
//Here String pathWebcontent would give you








()BoardDAO.java
//게시판 목록을 가져오기 위한 BoardDAO 클래스의 boardList() boardPageCnt() 메서드를 구현


	import java.sql.*;
	import java.util.ArrayList;
	import javax.naming.*;
	import javax.sql.DataSource;
//오타조심
public BoardDAO() {
			try {
				Context initContext = (Context)new InitialContext().lookup("java:comp/env");
				ds = (DataSource)initContext.lookup("jdbc/oracle");	
				
				}catch(Exception e) {
				e.printStackTrace();
			}
//sql, ArrayList, naming, DataSource;
//public ArrayList<BoardDTO> boardList(String curPage){

	=> 넘어온 현재 페이지(curPage) 가 2라면 WRITING_PER_PAGE가 10이니까  db에서 11번째부터 20번째까지의 데이터를 조회해서 	BoardDTO 10개를 만들고 그걸 ArrayList 에 담아서 리턴합니다.

 
	public BoardDTO boardRead(String inputNum){

	=> inputNum이니까 글번호에 해당합니다. 따라서 글번호에 해당하는 1개 데이터를 db에서 조회해서 BoardDTO에 담고 리턴합니다.

 
	public ArrayList<BoardDTO> boardSearch(String searchOption, String searchWord){
	=> 검색키와 검색어를 받아서 db에서 검색어에 해당하는 글들을 조회합니다. 검색어에 일치하는 데이터가 여러개가 될 수 있으니까 	검색된 로우 수만큼 BoardDTO를 만들고 그걸 ArrayList에 담아서 리턴합니다.
//외우기(1)
mysql



오라클(공책에-)
//mysql과 다름
			String sql = "SELECT * FROM "
					+ "(SELECT ROWNUM rnum, num, name, password, subject, "
					+ "content, write_date, write_time, ref, step, lev, "
					+ "read_cnt, child_cnt "
					+ "FROM ( SELECT * FROM BOARD ORDER BY ref desc, step asc ) "
					+ "BOARD )";
			sql += " WHERE rnum >= ? and rnum <= ?";

			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, WRITING_PER_PAGE * (Integer.parseInt(curPage) - 1) + 1);
			pstmt.setInt(2, WRITING_PER_PAGE * Integer.parseInt(curPage));
			
---
//그대로
			String sql = "SELECT COUNT (*) AS num FROM BOARD";
			
			
			
			

---
			<%@ page language="java" contentType="text/html; charset=EUC-KR" pageEncoding="EUC-KR" %>

<%@ page import = "java.sql.*" %>                    <!-- JSP에서 JDBC의 객체를 사용하기 위해 java.sql 패키지를 import 한다 -->



<%



Connection conn = null;                                        // null로 초기화 한다.



try{

String url = "jdbc:mysql://localhost:3306/jdbcTest";        // 사용하려는 데이터베이스명을 포함한 URL 기술

String id = "testid";                                                    // 사용자 계정

String pw = "testpw";                                                // 사용자 계정의 패스워드



Class.forName("com.mysql.jdbc.Driver");                       // 데이터베이스와 연동하기 위해 DriverManager에 등록한다.

conn=DriverManager.getConnection(url,id,pw);              // DriverManager 객체로부터 Connection 객체를 얻어온다.

out.println("제대로 연결되었습니다.");                            // 커넥션이 제대로 연결되면 수행된다.



}catch(Exception e){                                                    // 예외가 발생하면 예외 상황을 처리한다.

e.printStackTrace();

}

%>

출처: https://hyeonstorage.tistory.com/112 [개발이 하고 싶어요]





()BoardListCmd.java
public class BoardListCmd implements BoardCmd{
---

request.setAttribute("BoardList",list);
//action에서 객체를 request에 담을 때.

request.setAttribute("member", member);

이렇게 해서 jsp를 호출하면 jsp에서 "객체명"을 이용해서 객체를 받을 수 있다.

< %
Member member = (member)request.getAttribute("member");
% >

Object 형으로 받는 다는 것이 중요함
출처: https://jamo.tistory.com/entry/requestsetAttribute와-requestgetAttribute [자모군의 개발공간]






()boardList.jsp

//c:forEach 이름 목록을 가진  ArrayList를 출력하는 예제 입니다.
// 리스트를 만들어서 모델에 넣습니다.
List<String> nameList = new ArrayList<String>(Arrays.asList("홍길동", "김철수", "박영희"));
model.addAttribute("nameList", nameList);



<%-- JSP 페이지에서 출력합니다. --%>
<c:forEach var="name" items="${nameList}" varStatus="status">
    <p>${status.count} : <c:out value="${name}" /></p>
</c:forEach>



실행결과:

1 : 홍길동

2 : 김철수

3 : 박영희

출처: https://offbyone.tistory.com/368 [쉬고 싶은 개발자]



//c:forEach 일정 횟수의 루프를 돌면서 값을 출력하는 방법입니다.

<p><c:out value="${i}" /></p>
</c:forEach>

실행결과 : 
0
1
2
3

출처: https://offbyone.tistory.com/368 [쉬고 싶은 개발자]